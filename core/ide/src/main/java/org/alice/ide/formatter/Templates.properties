###############################################################################
# Copyright (c) 2006, 2015, Carnegie Mellon University. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Products derived from the software may not be called "Alice", nor may
#    "Alice" appear in their name, without prior written permission of
#    Carnegie Mellon University.
#
# 4. All advertising materials mentioning features or use of this software must
#    display the following acknowledgement: "This product includes software
#    developed by Carnegie Mellon University"
#
# 5. The gallery of art assets and animations provided with this software is
#    contributed by Electronic Arts Inc. and may be used for personal,
#    non-commercial, and academic use only. Redistributions of any program
#    source code that utilizes The Sims 2 Assets must also retain the copyright
#    notice, list of conditions and the disclaimer contained in
#    The Alice 3.0 Art Gallery License.
#
# DISCLAIMER:
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
# ANY AND ALL EXPRESS, STATUTORY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A
# PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT
# SHALL THE AUTHORS, COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING FROM OR OTHERWISE RELATING TO
# THE USE OF OR OTHER DEALINGS WITH THE SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
###############################################################################

AbstractDeclaration = </getName()/>
AbstractConstructor = </getDeclaringType()/>
UserLocal = </getValidName()/>
UserLambda = do in order\n\t</body/>

ExpressionStatement = </expression/>
BlockStatement = </statements/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
WhileLoop = Repeat while </conditional/> is true\n\t</body/>\n\t loop
ForEachInArrayLoop = For each </__item__/> in </array/>\n\t</body/>\n\t loop
CountLoop = Repeat </count/> times \n\t</body/>\n\t loop
BooleanExpressionBodyPair = If </expression/> is true Then\n\t</body/>
ConditionalStatement = </booleanExpressionBodyPairs/>\nElse\n\t</elseBody/>
DoTogether = Do together\n\t</body/>
DoInOrder = Do in order\n\t</body/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
Comment = Note </text/>
EachInArrayTogether = Each </__item__/> in </array/> together\n\t</body/>
ReturnStatement = return </expression/>
SuperConstructorInvocationStatement = super </requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement = this </requiredArguments/></variableArguments/></keyedArguments/>

AbstractValueLiteral = </value/>
StringLiteral = "</value/>"
NullLiteral = empty
ThisExpression = scene
ThisInstanceExpression = Active </baseTypeName/>
SuperExpression = super
TypeExpression = 
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
FieldAccess = </expression/> get</field/>
LocalAccess = </local/>
ParameterAccess = </parameter/>
ArrayAccess = </array/>[ </index/> ]
ArrayLength = </array/>.length
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
LogicalComplement = NOT </operand/>
InstanceCreation = new </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
ArrayInstanceCreation = collection: { </expressions/> }
StringConcatenation = </leftOperand/> + </rightOperand/>
ResourceExpression = </resource/>
LambdaExpression = </value/>

VariableDeclarationStatement = Store value </__variable__/> </_gets_toward_leading_/> </initializer/>
ConstantDeclarationStatement = Permanently set </__constant__/> </_gets_toward_leading_/> </initializer/>

GlobalFirstInstanceExpression = first instance

Argument = </getParameterNameText()/></expression/>