###############################################################################
# Copyright (c) 2008, 2015, Washington University in St. Louis.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Products derived from the software may not be called "Looking Glass", nor
#    may "Looking Glass" appear in their name, without prior written permission
#    of Washington University in St. Louis.
#
# 4. All advertising materials mentioning features or use of this software must
#    display the following acknowledgement: "This product includes software
#    developed by Washington University in St. Louis"
#
# 5. The gallery of art assets and animations provided with this software is
#    contributed by Electronic Arts Inc. and may be used for personal,
#    non-commercial, and academic use only. Redistributions of any program
#    source code that utilizes The Sims 2 Assets must also retain the copyright
#    notice, list of conditions and the disclaimer contained in
#    The Alice 3.0 Art Gallery License.
#
# DISCLAIMER:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.  ANY AND ALL
# EXPRESS, STATUTORY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE,
# TITLE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS,
# COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING FROM OR OTHERWISE RELATING TO
# THE USE OF OR OTHER DEALINGS WITH THE SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
###############################################################################

CodeBlockExplanations.method = action
CodeBlockExplanations.blockText = __CodeBlockExplanations.method__ box
CodeBlockExplanations.editableMethod = custom __CodeBlockExplanations.method__

CodeBlockExplanations.range = --
CodeBlockExplanations.endTime = end of played
CodeBlockExplanations.numFormat = %2.2f

CodeBlockExplanations.invokingMethod = All __method__s and __blockText__es are contained by <b>__editableMethod__s</b>.<BR> When a <b>__editableMethod__</b> plays, the __method__s and __blockText__es it breaks down into play in order from top to bottom.
CodeBlockExplanations.DoInOrder = A <b>Do In Order</b> __blockText__ plays the code it contains in order from top to bottom.
CodeBlockExplanations.DoTogether = A <b>Do Together</b> __blockText__ starts playing the code it contains together, at the same time.
CodeBlockExplanations.CountLoop = A <b>Count Loop</b> __blockText__ plays the code it contains in order, from top to bottom, as many times as its told to count.
CodeBlockExplanations.WhileLoop = A <b>While Loop</b> __blockText__ plays the code it contains in order, from top to bottom, until it reaches its bottom and its condition is no longer true.
CodeBlockExplanations.ForEachInArrayLoop = A <b>For Each Loop</b> __blockText__ plays the code it contains in order, from top to bottom one time for each item in the loop's array, in order of the items in the array.
CodeBlockExplanations.EachInArrayTogether = An <b>Each In Together</b> __blockText__ plays the code it contains in order, from top to bottom, for each item in the loop's array. The __blockText__ starts playing together for all the array items at the same time.

ConcurrentActionsTree.noConcurrentL1 = No other __CodeBlockExplanations.method__s or __CodeBlockExplanations.blockText__es 
ConcurrentActionsTree.noConcurrentL2 = played at the same time.
