###############################################################################
# Copyright (c) 2008, 2015, Washington University in St. Louis.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Products derived from the software may not be called "Looking Glass", nor
#    may "Looking Glass" appear in their name, without prior written permission
#    of Washington University in St. Louis.
#
# 4. All advertising materials mentioning features or use of this software must
#    display the following acknowledgement: "This product includes software
#    developed by Washington University in St. Louis"
#
# 5. The gallery of art assets and animations provided with this software is
#    contributed by Electronic Arts Inc. and may be used for personal,
#    non-commercial, and academic use only. Redistributions of any program
#    source code that utilizes The Sims 2 Assets must also retain the copyright
#    notice, list of conditions and the disclaimer contained in
#    The Alice 3.0 Art Gallery License.
#
# DISCLAIMER:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.  ANY AND ALL
# EXPRESS, STATUTORY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE,
# TITLE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS,
# COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING FROM OR OTHERWISE RELATING TO
# THE USE OF OR OTHER DEALINGS WITH THE SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
###############################################################################

walk = A character walks forward by the given amount.
walk.amount = how far should the character walk?
walk.walkPace = how quickly should the character walk?
walk.strideLength = how long should the character's steps be?
walk.bounce = how much should the character bounce?
walk.armSwing = how much should the character's arms swing?

walkTo = A character walks to the given target.
walkTo.model = what should the character walk to?
walkTo.distanceBetween = how far away should the character be?
walkTo.walkPace = how quickly should the character walk?
walkTo.strideLength = how long should the character's steps be?
walkTo.bounch = how much should the character bounce?
walkTo.armSwing = how much should the character's arms swing?

say = A character says the given text in a speech bubble.
say.text = what should the character say?
say.fontColor = what color should the text be?
say.bubbleOutlineColor = what color should the speech bubble outline color be?
say.bubbleFillColor = what color should the speech bubble be?
say.duration = how long should the character speak for?

think = A character thinks the given text in a thought bubble.
think.text = what should the character think?
think.fontColor = what color should the text be?
think.bubbleOutlineColor = what color should the thought bubble outline color be?
think.bubbleFillColor = what color should the thought bubble be?
think.duration = how long should the character think for?

move = A character moves in the given direction by the given amount.
move.direction = what direction should the character move?
move.amount = how far should the character move?
move.asSeenBy = from what objects viewpoint should the character move?
move.duration = how long should it take for the character to move?
move.animationStyle = how should the move be animated?

moveToward = A character moves toward the given target by the given amount.
moveToward.target = what should the character move toward?
moveToward.amount = how far should the character move?
moveToward.asSeenBy = from what objects viewpoint should the character move?
moveToward.duration = how long should it take for the character to move?
moveToward.animationStyle = how should the move be animated?

moveAwayFrom = A character moves away from the given target by the given amount.
moveAwayFrom.target = what should the character move away from?
moveAwayFrom.amount = how far should the character move? 
moveAwayFrom.asSeenBy = from what objects viewpoint should the character move?
moveAwayFrom.duration = how long should it take for the character to move?
moveAwayFrom.animationStyle = how should the move be animated?

moveTo = A character moves to the given target.
moveTo.target = what should the character move to?
moveTo.pathStyle = how should the character move?
moveTo.duration = how long should it take for the character to move?
moveTo.animationStyle = how should the move be animated?

place = A character is placed in relationship to the given target.
place.spatialRelation = where should the character be placed in relation to the target?
place.target = what should the character be placed at?
place.alongAxisOffset = how far from the target should the character be placed?
place.pathStyle = how should the character move?
place.animationStyle = how should the place be animated?

turn = A character turns in the given direction by the given amount.
turn.direction = what direction should the character turn?
turn.amount = how many times should the character turn?
turn.asSeenBy = from what objects viewpoint should the character turn?
turn.duration = how long should it take the character to turn?
turn.animationStyle = how should the turn be animated?

roll = A character rolls in the given direction by the given amount.
roll.direction = what direction should the character roll?
roll.amount = how many times should the character roll?
roll.asSeenBy = from what objects viewpoint should the character roll?
roll.duration = how long should it take the character to roll?
roll.animationStyle = how should the roll be animated?

turnToFace = A character turns to face the given target.
turnToFace.target = what should the character turn to face?
turnToFace.duration = how long should it take the character to turn?
turnToFace.animationStyle = how should the turn be animated?

orientTo = A character changes its orientation to match the given target.
orientTo.target = what should the character match its orientation to?
orientTo.duration = how long should it take to orient?
orientTo.animationStyle = how should the orient be animated?

orientToUpright = A character changes its orientation to an upright position.
orientToUpright.upAsSeenBy  = from what objects viewpoint should the character orient?
orientToUpright.duration = how long should it take to orient?
orientToUpright.animationStyle = how should the orient be animated?

pointAt = A character changes its orientation and turns to face a given target.
pointAt.target = what should the character face? 
pointAt.upAsSeenBy = from what objects viewpoint should the character orient?
pointAt.duration = how long should it take the character to face the target?
pointAt.animationStyle = how should the movement be animated? 

appear = A character change from invisible to visible.
appear.duration = how long should it take the character to appear?
appear.animationStyle = how should the appearance be animated?

disappear = A character change from visible to invisible.
disappear.duration = how long should it take the character to disappear?
disappear.animationStyle = how should the disappearance be animated?

resize = A character resizes by a given amount.
resize.factor = what amount should the character resize by?
resize.duration = how long should it take the character to resize?
resize.animationStyle = how should the resize be animated?

resizeWidth = A character's width resizes by a given amount.
resizeWidth.factor = what amount should the character's width resize by?
resizeWidth.isVolumePreserved = how should the character resize?
resizeWidth.duration = how long should it take the character's width to resize?
resizeWidth.animationStyle = how should the resize be animated?

resizeHeight = A character's height resizes by a given amount.
resizeHeight.factor = what amount should the character's height resize by?
resizeHeight.isVolumePreserved = how should the character resize?
resizeHeight.duration = how long should it take the character's height to resize?
resizeHeight.animationStyle = how should the resize be animated?

resizeDepth = A character's depth resizes by a given amount.
resizeDepth.factor = what amount should the character's depth resize by?
resizeDepth.isVolumePreserved = how should the character resize?
resizeDepth.duration = how long should it take the character's depth to resize?
resizeDepth.animationStyle = how should the resize be animated?

setWidth = A character's width is set to a given size.
setWidth.width = what amount should the character's width be set to?
setWidth.policy = how should the character size change?
setWidth.duration = how long should it take to change the character's width?
setWidth.animationStyle = how should the change be animated?

setHeight = A character's height is set to a given size.
setHeight.height = what amount should the character's height be set to?
setHeight.policy = how should the character size change?
setHeight.duration = how long should it take to change the character's height?
setHeight.animationStyle = how should the change be animated?

setDepth = A character's depth is set to a given size.
setDepth.depth = what amount should the character's depth be set to?
setDepth.policy = how should the character size change?
setDepth.duration = how long should it take to change the character's depth?
setDepth.animationStyle = how should the change be animated?

setPaint = A character's color changes to the given color.
setPaint.paint = what color should the character be? 
setPaint.duration = how long should it take to set the character's color?
setPaint.animationStyle = how should the change be animated?

setOpacity = A character's transparency changes to the given amount.
setOpacity.opacity = how transparent should the character be?
setOpacity.duration = how long should it take to set the character's transparency?
setOpacity.animationStyle = how should the change be animated?

moveAndOrientTo = A character moves and changes its orientation to match the given target. 
moveAndOrientTo.target = what should the character move and match its orientation to?
moveAndOrientTo.pathStyle = how should the character move? 
moveAndOrientTo.duration = how long should it take for the character to move?
moveAndOrientTo.animationStyle = how should the movement be animated?

setVehicle = A character will move in relation to the given vehicle.
setVehicle.vehicle = what should the character's vehicle be?

playAudio = A character plays a given sound.
playAudio.audioSource = what sound should play?

straightenOutJoints = A character's joints return to their original position.
straightenOutJoints.duration = how long should it take to move the character's joints?
straightenOutJoints.animationStyle = how should the movement be animated?

setAtmosphereColor = The scene atmosphere color is set to the given color.
setAtmosphereColor.color = what color should the atmosphere be?
setAtmosphereColor.duration = how long should it take to change the atmosphere color?
setAtmosphereColor.animationStyle = how should the change be animated?

setFromAboveLightColor = The scene above light color is set to the given color.
setFromAboveLightColor.color = what color should come from above?

setFromBelowLightColor = The scene below light color is set to the given color.
setFromBelowLightColor.color = what color should come from below?

setFogDensity = The scene fog density is set to the given amount.
setFogDensity.density = how dense should the fog be?
setFogDensity.duration = how long should it take to change the fog density?
setFogDensity.animationStyle = how should the change be animated?

delay = The story is paused for the given duration.
delay.duration = how long should the story pause?

moveAndOrientToAGoodVantagePointOf = The camera is moved and oriented to view the given target.
moveAndOrientToAGoodVantagePointOf.entity = what should the camera move to look at?
moveAndOrientToAGoodVantagePointOf.duration = how long should it take the camera to move?
moveAndOrientToAGoodVantagePointOf.animationStyle = how should the move be animated?

setFloorPaint = The room floor paint is set to the given color or texture.
setFloorPaint.paint = what should the floor be painted with?
setFloorPaint.duration = how long should it take to change the floor paint?
setFloorPaint.animationStyle = how should the change be animated?

setWallPaint = The room wall paint is set to the given color or texture.
setWallPaint.paint = what should the wall be painted with?
setWallPaint.duration = how long should it take to change the wall paint?
setWallPaint.animationStyle = how should the change be animated?

setCeilingPaint = The room ceiling paint is set to the given color or texture.
setCeilingPaint.paint = what should the ceiling be painted with?
setCeilingPaint.duration = how long should it take to change the ceiling paint?
setCeilingPaint.animationStyle = how should the change be animated?